#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Отказ от проведения документа если вид договора не абонент и если период договора не действует
	ПроверяемДанныеДоговора(Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Отказ от проведения документа если вид договора не абонент и если период договора не действует
	ПроверяемДанныеДоговора(Отказ);
	
	// Движения в Регистр накопления "ВКМ_ВыполненныеКлиентуРаботы" и "ВКМ_ВыполненныеСотрудникомРаботы"
	ФормируемДвиженияВРегистры(Отказ);
	
	// Создаем перерасчет начислений (дополнительные начисления) процента от выполненных работ специалистам
	СоздатьПерерасчетПроцентОтРабот();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Обязательная проверка признака ОбменДанными.Загрузка
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Сформировать уведомления телеграм
	//Замечание №1. Дополнительные свойства документа для передачи ЭтоНовыйДокумент
	Если ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("ЭтоНовыйДокумент", Истина);
	Иначе
		СформироватьУведомлениеТелеграм_ИзменениеЗаявки();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Обязательная проверка признака ОбменДанными.Загрузка
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Создать уведомления телеграм
	//Замечание №1. Дополнительные свойства документа для передачи ЭтоНовыйДокумент
	Если ДополнительныеСвойства.Свойство("ЭтоНовыйДокумент") Тогда
		ТекстСообщенияОтправки = СформироватьУведомлениеТелеграм_НоваяЗаявка();
		СоздатьУведомлениеТелеграм(ТекстСообщенияОтправки);
	КонецЕсли;
	
	ДополнительныеСвойства.Удалить("ЭтоНовыйДокумент");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УведомлениеТелеграм_НоваяЗаявка

Функция СформироватьУведомлениеТелеграм_НоваяЗаявка()
	
	МассивСтрокУведомления = Новый Массив;
	
	ТекстНоваяЗаявка = СформироватьТекстНоваяЗаявка();
	МассивСтрокУведомления.Добавить(ТекстНоваяЗаявка);
	
	ШаблонСпециалист = "%1 Специалист:%2<i>%3</i>";
	ТекстСпециалист = СформироватьТекстСпециалист(ШаблонСпециалист);
	МассивСтрокУведомления.Добавить(ТекстСпециалист);
	
	ШаблонДата = "%1 Дата проведения работ:%2<i>%3</i>";
	ТекстДатаРабот = СформироватьТекстДатаПроведенияРабот(ШаблонДата);
	МассивСтрокУведомления.Добавить(ТекстДатаРабот);
	
	ШаблонВремя = "%1 Время проведения работ:%2<i>с %3 до %4 часов</i>";
	ТекстВремяРабот = СформироватьТекстВремяПроведенияРабот(ШаблонВремя);
	МассивСтрокУведомления.Добавить(ТекстВремяРабот);
	
	
	ТекстСообщенияОтправки = СтрСоединить(МассивСтрокУведомления, Символы.ПС);
	
	Возврат ТекстСообщенияОтправки;
	
КонецФункции

Функция СформироватьТекстНоваяЗаявка()
	
	ШаблонЗаявка = "<b>%1 Новая заявка №%2 от %3</b>";
	КартинкаЗаявка = "%F0%9F%93%9D";
	НомерБезНулей = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Номер, "0");
	ДатаДокумента = Формат(Дата, "ДЛФ=DD");
	ТекстНоваяЗаявка = СтрШаблон(ШаблонЗаявка, КартинкаЗаявка, НомерБезНулей, ДатаДокумента);
	
	Возврат ТекстНоваяЗаявка;
	
КонецФункции

#КонецОбласти

#Область УведомлениеТелеграм_ИзменениеЗаявки

Процедура СформироватьУведомлениеТелеграм_ИзменениеЗаявки()
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Специалист, ДатаПроведенияРабот, ВремяНачалаРабот, ВремяОкончанияРабот");
	
	МассивСтрокУведомления = Новый Массив;
	
	ТекстИзмененияЗаявки = СформироватьТекстИзменениеЗаявки();
	МассивСтрокУведомления.Добавить(ТекстИзмененияЗаявки);
	
	Если ДанныеДокумента.Специалист <> Специалист Тогда
		ШаблонСпециалист = "%1 Новый специалист:%2<i>%3</i>";
		ТекстСпециалист = СформироватьТекстСпециалист(ШаблонСпециалист);
		МассивСтрокУведомления.Добавить(ТекстСпециалист);
	КонецЕсли;
	
	Если ДанныеДокумента.ДатаПроведенияРабот <> ДатаПроведенияРабот Тогда
		ШаблонДата = "%1 Новая дата проведения работ:%2<i>%3</i>";
		ТекстДатаРабот = СформироватьТекстДатаПроведенияРабот(ШаблонДата);
		МассивСтрокУведомления.Добавить(ТекстДатаРабот);
	КонецЕсли;
	
	Если ДанныеДокумента.ВремяНачалаРабот <> ВремяНачалаРабот Или ДанныеДокумента.ВремяОкончанияРабот <> ВремяОкончанияРабот Тогда
		ШаблонВремя = "%1 Новое время проведения работ:%2<i>с %3 до %4 часов</i>";
		ТекстВремяРабот = СформироватьТекстВремяПроведенияРабот(ШаблонВремя);
		МассивСтрокУведомления.Добавить(ТекстВремяРабот);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСпециалист) Или ЗначениеЗаполнено(ТекстДатаРабот) Или ЗначениеЗаполнено(ТекстВремяРабот) Тогда
		ТекстСообщенияОтправки = СтрСоединить(МассивСтрокУведомления, Символы.ПС);
		СоздатьУведомлениеТелеграм(ТекстСообщенияОтправки);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТекстИзменениеЗаявки()
	
	ШаблонИзменениеЗаявки = "<b>%1 Изменение заявки №%2 от %3</b>";
	КартинкаИзменениеЗаявки = "%E2%9D%97";
	НомерБезНулей = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Номер, "0");
	ДатаДокумента = Формат(Дата, "ДЛФ=DD");
	ТекстИзмененияЗаявки = СтрШаблон(ШаблонИзменениеЗаявки,КартинкаИзменениеЗаявки, НомерБезНулей, ДатаДокумента);
	
	Возврат ТекстИзмененияЗаявки;
	
КонецФункции

#КонецОбласти

#Область УведомлениеТелеграм_ОбщегоНазначения

Функция СформироватьТекстСпециалист(ШаблонСпециалист)
	
	КартинкаСпециалист = "%F0%9F%92%81";
	ТекстСпециалист = СтрШаблон(ШаблонСпециалист, КартинкаСпециалист, Символы.ПС, Специалист);
	
	Возврат ТекстСпециалист;
	
КонецФункции

Функция СформироватьТекстДатаПроведенияРабот(ШаблонДата)
	
	КартинкаДата = "%F0%9F%93%86";
	ДатаПроведения = Формат(ДатаПроведенияРабот, "ДЛФ=DD");
	ТекстДатаРабот = СтрШаблон(ШаблонДата, КартинкаДата, Символы.ПС, ДатаПроведения);
	
	Возврат ТекстДатаРабот;
	
КонецФункции

Функция СформироватьТекстВремяПроведенияРабот(ШаблонВремя)
	
	КартинкаВремя = "%E2%8F%B0";
	ВремяНачала = Формат(ВремяНачалаРабот, "ДФ=ЧЧ:мм");
	ВремяОкончания = Формат(ВремяОкончанияРабот, "ДФ=ЧЧ:мм");
	ТекстВремяРабот = СтрШаблон(ШаблонВремя, КартинкаВремя, Символы.ПС, ВремяНачала, ВремяОкончания);
	
	Возврат ТекстВремяРабот;
	
КонецФункции

Процедура СоздатьУведомлениеТелеграм(ТекстСообщенияОтправки)
	
	УведомлениеТелеграм = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
	УведомлениеТелеграм.ТекстСообщения = ТекстСообщенияОтправки;
	УведомлениеТелеграм.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПроверяемДанныеДоговора

Процедура ПроверяемДанныеДоговора(Отказ)
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		ДанныеДоговора = ВКМ_ПроверкаДанныхДокумента.ПолучитьДанныеДоговора(Дата, Договор);
		
		Если ДанныеДоговора.ЭтоАбонентскоеОбслуживание Тогда
			Если Не ДанныеДоговора.ЭтоДействующийДоговор Тогда
				ВывестиСообщение_ПериодДоговора();
				Отказ = Истина;
			КонецЕсли;
		Иначе
			ВывестиСообщение_ВидДоговора();
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСообщение_ПериодДоговора()
	
	ДатаДокумента = Формат(Дата, "ДЛФ=DD");
	ТекстСообщения = СтрШаблон("Период действия договора не соответствует дате документа: %1", ДатаДокумента);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Договор);
	
КонецПроцедуры

Процедура ВывестиСообщение_ВидДоговора()
	
	ТекстСообщения = СтрШаблон("Вид договора (%1) не соответствует абонентскому обслуживанию", Договор);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Договор");
	
КонецПроцедуры

#КонецОбласти

#Область ФормируемДвиженияРегистр

Процедура ФормируемДвиженияВРегистры(Отказ)
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	
	СтоимостьЧасаРаботыСпециалиста = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВКМ_СтоимостьЧасаРаботы");
	
	Если Не ЗначениеЗаполнено(СтоимостьЧасаРаботыСпециалиста) Тогда
		ТекстСообщения = "В договоре не заполнена стоимость часа работ специалиста";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Договор, "ВКМ_СтоимостьЧасаРаботы");
	КонецЕсли;
	
	ВыборкаЧасы = ПолучитьДанныеЧасыКОплате();
	
	ЧасыКОплатеКлиенту = ВыборкаЧасы.ЧасыКОплатеКлиенту;
	
	СуммаКОплатеКлиенту = ЧасыКОплатеКлиенту * СтоимостьЧасаРаботыСпециалиста;
	
	ФормируемДвиженияРегистр_ВКМ_ВыполненныеКлиентуРаботы(СуммаКОплатеКлиенту, ЧасыКОплатеКлиенту);
	
	ФормируемДвиженияРегистр_ВКМ_ВыполненныеСотрудникомРаботы(СуммаКОплатеКлиенту, ЧасыКОплатеКлиенту, Отказ);
	
КонецПроцедуры

Процедура ФормируемДвиженияРегистр_ВКМ_ВыполненныеКлиентуРаботы(СуммаКОплатеКлиенту, ЧасыКОплатеКлиенту)
	
	//Замечание №4. Доработать Отчёт Анализ выставленных актов
	Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.ДобавитьПриход();
	Движение.Период = Дата;
	Движение.Клиент = Клиент;
	Движение.Договор = Договор;
	Движение.КоличествоЧасов = ЧасыКОплатеКлиенту;
	Движение.СуммаКОплате = СуммаКОплатеКлиенту;
	
КонецПроцедуры

Процедура ФормируемДвиженияРегистр_ВКМ_ВыполненныеСотрудникомРаботы(СуммаКОплатеКлиенту, ЧасыКОплатеКлиенту, Отказ)
	
	РезультатЗапроса = ПолучитьДанныеПроцентОтРабот();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = СтрШаблон("В регистре ""Условия олаты сотрудников"" нет данных о сотруднике: %1", Специалист);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Специалист");
		Отказ = Истина;
		Возврат;
		
	Иначе
		
		ВыборкаПроцент = РезультатЗапроса.Выбрать();
		ВыборкаПроцент.Следующий();
		
		ПроцентОтРабот = ВыборкаПроцент.ПроцентОтРабот;
		
		Если Не ВыборкаПроцент.НулевойПроцент И ПроцентОтРабот = 0 Тогда
			ТекстСообщения = СтрШаблон("В регистре ""Условия олаты сотрудников"" нет данных о проценте от работ у специалиста: %1", Специалист);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.Специалист");
			Отказ = Истина;
			Возврат;
		Иначе
			Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
			Движение.Период = Дата;
			Движение.Сотрудник = Специалист;
			Движение.ЧасовКОплате = ЧасыКОплатеКлиенту;
			СуммаКОплатеСотруднику = СуммаКОплатеКлиенту * ПроцентОтРабот / 100;
			Движение.СуммаКОплате = СуммаКОплатеСотруднику;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеЧасыКОплате()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.ЧасыКОплатеКлиенту), 0) КАК ЧасыКОплатеКлиенту
	|ИЗ
	|	Документ.ВКМ_ОбслуживаниеКлиента.ВыполненныеРаботы КАК ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы
	|ГДЕ
	|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция ПолучитьДанныеПроцентОтРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот,
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.НулевойПроцент КАК НулевойПроцент
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Специалист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПерерасчетПроцентОтРабот

Процедура СоздатьПерерасчетПроцентОтРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ДополнительныеНачисления.Регистратор КАК Регистратор,
		|	ВКМ_ДополнительныеНачисления.ВидРасчета КАК ВидРасчета,
		|	ВКМ_ДополнительныеНачисления.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрРасчета.ВКМ_ДополнительныеНачисления КАК ВКМ_ДополнительныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ДополнительныеНачисления.ПерерасчетПроцентОтРабот КАК ПерерасчетПроцентОтРабот
		|		ПО ВКМ_ДополнительныеНачисления.Регистратор = ПерерасчетПроцентОтРабот.ОбъектПерерасчета
		|			И ВКМ_ДополнительныеНачисления.ВидРасчета = ПерерасчетПроцентОтРабот.ВидРасчета
		|			И ВКМ_ДополнительныеНачисления.Сотрудник = ПерерасчетПроцентОтРабот.Сотрудник
		|ГДЕ
		|	ВКМ_ДополнительныеНачисления.ПериодРегистрации МЕЖДУ &НачалоСледущегоМесяца И &КонецСледущегоМесяца
		|	И ВКМ_ДополнительныеНачисления.ВидРасчета = &ПроцентОтРабот
		|	И ПерерасчетПроцентОтРабот.ОбъектПерерасчета ЕСТЬ NULL
		|	И ВКМ_ДополнительныеНачисления.Сотрудник = &Сотрудник";
	
	
	Запрос.УстановитьПараметр("НачалоСледущегоМесяца", ДобавитьМесяц(Дата, -1));
	Запрос.УстановитьПараметр("КонецСледущегоМесяца", ДобавитьМесяц(Дата, 1));
	Запрос.УстановитьПараметр("ПроцентОтРабот", ПланыВидовРасчета.ВКМ_ДополнительныеНачисления.ПроцентОтРабот);
	Запрос.УстановитьПараметр("Сотрудник", Специалист);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыРасчета.ВКМ_ДополнительныеНачисления.Перерасчеты.ПерерасчетПроцентОтРабот.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПерерасчета.Установить(Выборка.Регистратор);
		
		Запись = НаборЗаписей.Добавить();
		Запись.ОбъектПерерасчета = Выборка.Регистратор;
		Запись.ВидРасчета = Выборка.ВидРасчета;
		Запись.Сотрудник = Выборка.Сотрудник;
		
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

