
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//ВКМ_Захарова: Добавить Команду и Кнопку Заполнить на Форму
	ДобавитьКомандуЗаполнить();
	//ВКМ_Захарова
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ДобавитьКомандуЗаполнить
//ВКМ_Захарова: Добавить Команды Заполнить

&НаСервере
Процедура ДобавитьКомандуЗаполнить()
//ВКМ_Захарова: Добавить Команду и Кнопку Заполнить на Форму
	
	// Добавление команды формы
	Команда = Команды.Добавить("Заполнить"); //Имя команды
	Команда.Заголовок = "Заполнить";
	Команда.Картинка = БиблиотекаКартинок.ВКМ_КомандаЗаполнить;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Команда.Действие  = "Подключаемый_ВКМ_КомандаЗаполнить"; //Имя связанной процедуры
	
	// Добавление кнопки формы
	КнопкаФормы = Элементы.Добавить("КнопкаЗаполнить", Тип("КнопкаФормы"), КоманднаяПанель);
	КнопкаФормы.ИмяКоманды = "Заполнить"; //Связь с командой по имени
	КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; 
	КнопкаФормы.ЦветФона = WebЦвета.Лазурный;
	
//ВКМ_Захарова
КонецПроцедуры

//ВКМ_Захарова
#КонецОбласти

#Область ДействиеКомандыЗаполнить
//ВКМ_Захарова: Действие Команды Заполнить

&НаКлиенте
Процедура Подключаемый_ВКМ_КомандаЗаполнить(Команда)
//ВКМ_Захарова: Проверка данных договора и констант номенклатуры с выводом подробных сообщений пользователю
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		
		ДанныеДоговора = ПолучитьДанныеДоговора();
		ДанныеКонстант = ПолучитьДанныеКонстант();
		
		Если Не ДанныеДоговора.ЭтоАбонентскоеОбслуживание Тогда
			ВывестиСообщение_ВидДоговора();
		ИначеЕсли Не ДанныеДоговора.ЭтоДействующийДоговор Тогда
			ВывестиСообщение_ПериодДоговора();
		ИначеЕсли Не ДанныеКонстант.ЕстьКонстантыНоменклатуры Тогда
			ВывестиСообщение_КонстантыНоменклатуры();
		Иначе
			ЗадатьВопрос_ВызватьКомандаЗаполнитьНаСервере();
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "Заполните поле договор перед автозаполнением документа";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Договор");
		
	КонецЕсли;
	
//ВКМ_Захарова
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьНаСервере()
	//ВКМ_Захарова: Вызов процедуры ВыполнитьАвтозаполнение в модуле объекта документа
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	ОбъектФормы.ВыполнитьАвтозаполнение();
	ЗначениеВРеквизитФормы(ОбъектФормы, "Объект");
	
	ВывестиИнформациюДанныеАбонентскойПлаты();
	
	ВывестиДекорациюАктРеализации();
	
//ВКМ_Захарова
КонецПроцедуры

//ВКМ_Захарова
#КонецОбласти

#Область ПолучитьДанныеДоговораИКонстант
//ВКМ_Захарова: Получить данные договора и констант номенклатуры

&НаСервере
Функция ПолучитьДанныеДоговора()
//ВКМ_Захарова: Получить данные договора
	
	ДанныеДоговора = ВКМ_ПроверкаДанныхДокумента.ПолучитьДанныеДоговора(Объект.Дата, Объект.Договор);
	
	Возврат ДанныеДоговора;
	
//ВКМ_Захарова
КонецФункции

&НаСервере
Функция ПолучитьДанныеКонстант()
//ВКМ_Захарова: Получить данные констант номенклатуры
	
	ДанныеКонстант = ВКМ_ПроверкаДанныхДокумента.ПолучитьКонстантыНоменклатуры();
	
	Возврат ДанныеКонстант;
	
//ВКМ_Захарова
КонецФункции

//ВКМ_Захарова
#КонецОбласти

#Область СообщенияКомандыЗаполнить
//ВКМ_Захарова: Сообщения Команды Заполнить

&НаКлиенте
Процедура ВывестиСообщение_ВидДоговора()
//ВКМ_Захарова: Сообщение вид договора не абонентское обслуживание
	
	ТекстСообщения = "Вид договора не соответствует виду договора абонентское обслуживание";
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Договор");
	
//ВКМ_Захарова
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщение_ПериодДоговора()
//ВКМ_Захарова: Сообщение период договора не действителен, с переходом в форму договоры на период действия
	
	ДатаДокумента = Формат(Объект.Дата, "ДЛФ=DD");
	ТекстСообщения = СтрШаблон("Период действия договора не соответствует дате документа: %1", ДатаДокумента);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект.Договор);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ВКМ_ПериодДействияДоговора");
	
//ВКМ_Захарова
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщение_КонстантыНоменклатуры()
//ВКМ_Захарова: Сообщение константы номенклатуры не заполнены, с переходом в форму констант номенклатуры
	
	ТекстСообщения = "Заполните констаты номенклатуры для автозаполнения документа";
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.Услуги");
	ОткрытьФорму("ОбщаяФорма.ВКМ_ФормаКонстантНоменклатура");
	
//ВКМ_Захарова
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗадатьВопрос_ВызватьКомандаЗаполнитьНаСервере()
//ВКМ_Захарова: Задать вопрос о необходимости дальнейшего заполнения
//В случае положительного ответа Вызов процедуры КомандаЗаполнитьНаСервере
	
	ТекстВопроса = "При автоматическом заполнении документа данные в таблице ""Товары"" и ""Услуги"" будут очищены.
	|Таблица ""Услуги"" будет заполнена данными по обслуживанию клиентов. Продолжить?";
	
	Ответ = Ждать ВопросАсинх(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КомандаЗаполнитьНаСервере();
	КонецЕсли;
	
//ВКМ_Захарова
КонецПроцедуры

&НаСервере
Процедура ВывестиИнформациюДанныеАбонентскойПлаты()
//ВКМ_Захарова: Информирование пользователей о незаполненных данных абонентской платы в договоре
	
	ДанныеАбонентскаяПлата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "ВКМ_СуммаАбонентскойПлаты, ВКМ_СтоимостьЧасаРаботы");
	
	Если Не ЗначениеЗаполнено(ДанныеАбонентскаяПлата.ВКМ_СуммаАбонентскойПлаты) Тогда
		ТекстСообщения = "В договоре не заполнена абоненская плата, в таблице ""Услуги"" будут отсутствовать данные о ней";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Договор, "ВКМ_СуммаАбонентскойПлаты");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеАбонентскаяПлата.ВКМ_СтоимостьЧасаРаботы) Тогда
		ТекстСообщения = "В договоре не заполнены работы специалистов, в таблице ""Услуги"" будут отсутствовать данные о них";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Договор, "ВКМ_СтоимостьЧасаРаботы");
	КонецЕсли;
	
//ВКМ_Захарова
КонецПроцедуры

&НаСервере
Процедура ВывестиДекорациюАктРеализации()
//ВКМ_Захарова: Декорация надпись для вывода информации по автоматическому созданию акта реализации
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		ИмяГруппы = "ГруппаДекорация";
		ГруппаДекорацияФормы = Элементы.Найти(ИмяГруппы);
		
		Если ГруппаДекорацияФормы = Неопределено Тогда
			
			//Создаем Группу Декорация для вывода информации по автоматическому созданию акта реализации
			ГруппаДекорация =Элементы.Добавить("ГруппаДекорация",Тип("ГруппаФормы"),ЭтотОбъект);
			Элементы.Переместить(ГруппаДекорация, Элементы.ГруппаСуммаДокумента, Элементы.ДекорацияЗаполнениеСуммыДокумента);
			ГруппаДекорация.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаДекорация.ОтображатьЗаголовок = Ложь;
			ГруппаДекорация.ЦветФона = WebЦвета.Лазурный;
			ГруппаДекорация.РастягиватьПоГоризонтали = Истина;
			
			//Создаем Декорация надпись для вывода информации по автоматическому созданию акта реализации
			НовыйЭлемент = Элементы.Добавить("ДекорацияАктРеализации", Тип("ДекорацияФормы"), Элементы.ГруппаДекорация);
			НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
			МесяцСозданияАкта = Формат(Объект.Дата, "ДФ=ММММ");
			ТекстДекорацииДокумента = СтрШаблон("Автоматическое создание акта за %1 месяц (%2)", МесяцСозданияАкта, Объект.Договор);
			НовыйЭлемент.Заголовок = ТекстДекорацииДокумента;
			
		Иначе
			
			// Обновление текста Декорации
			МесяцСозданияАкта = Формат(Объект.Дата, "ДФ=ММММ");
			ТекстДекорацииДокумента = СтрШаблон("Автоматическое создание акта за %1 месяц (%2)", МесяцСозданияАкта, Объект.Договор);
			Элементы.ДекорацияАктРеализации.Заголовок = ТекстДекорацииДокумента;
			
		КонецЕсли;
		
	КонецЕсли;
	
//ВКМ_Захарова
КонецПроцедуры

//ВКМ_Захарова
#КонецОбласти

#КонецОбласти
