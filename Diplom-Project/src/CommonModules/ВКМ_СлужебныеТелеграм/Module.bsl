
#Область ПрограммныйИнтерфейс

#Область КонстантыТелеграм

// Получить токен телеграм бот.
// 
// Возвращаемое значение:
//  Неопределено, Произвольный, Строка -  Получить токен телеграм бот
Функция ПолучитьТокенТелеграмБот() Экспорт
	
	ТокенТелеграмБот = Константы.ВКМ_ТокенУправленияТелеграмБотом.Получить();
	
	Если Не ЗначениеЗаполнено(ТокенТелеграмБот) Тогда
		ИмяСобытия = "Константы.ВКМ_ТокенУправленияТелеграмБотом";
		ТекстКомментария = "Заполните токен управления телеграм-ботом в форме констант телеграм";
		СоздатьЗаписьВЖурналеРегистрации(ИмяСобытия, ТекстКомментария);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТокенТелеграмБот;
	
КонецФункции

// Получить идентификатор чата группы телеграм.
// 
// Возвращаемое значение:
//  Неопределено, Произвольный, Строка -  Получить идентификатор чата группы телеграм
Функция ПолучитьИдентификаторЧатаГруппыТелеграм() Экспорт
	
	ИдентификаторЧатаГруппыТелеграм = Константы.ВКМ_ИдентификаторГруппыДляОповещения.Получить();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЧатаГруппыТелеграм) Тогда
		ИмяСобытия = "Константы.ВКМ_ИдентификаторГруппыДляОповещения";
		ТекстКомментария = "Заполните идентификатор группы для оповещения в форме констант телеграм";
		СоздатьЗаписьВЖурналеРегистрации(ИмяСобытия, ТекстКомментария);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИдентификаторЧатаГруппыТелеграм;
	
КонецФункции

// Получить уникальный идентификатор обновления.
// 
// Возвращаемое значение:
//  Произвольный, Число -  Получить уникальный идентификатор обновления
Функция ПолучитьУникальныйИдентификаторОбновления() Экспорт
	
	УникальныйИдентификаторОбновления = Константы.ВКМ_УникальныйИдентификаторОбновления.Получить();
	
	Возврат УникальныйИдентификаторОбновления;
	
КонецФункции

// Получить название компании телеграм.
// 
// Возвращаемое значение:
//  Неопределено, Произвольный, Строка -  Получить название компании телеграм
Функция ПолучитьНазваниеКомпанииТелеграм() Экспорт
	
	НазваниеКомпанииТелеграм = Константы.ВКМ_НазваниеКомпанииТелеграм.Получить();
	
	Если Не ЗначениеЗаполнено(НазваниеКомпанииТелеграм) Тогда
		ИмяСобытия = "Константы.ВКМ_НазваниеКомпанииТелеграм";
		ТекстКомментария = "Заполните название компании в форме констант телеграм";
		СоздатьЗаписьВЖурналеРегистрации(ИмяСобытия, ТекстКомментария);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НазваниеКомпанииТелеграм;
	
КонецФункции

// Получить контакты компании телеграм.
// 
// Возвращаемое значение:
//  Неопределено, Произвольный, Строка -  Получить контакты компании телеграм
Функция ПолучитьКонтактыКомпанииТелеграм() Экспорт
	
	КонтактыКомпанииТелеграм = Константы.ВКМ_КонтактыКомпанииТелеграм.Получить();
	
	Если Не ЗначениеЗаполнено(КонтактыКомпанииТелеграм) Тогда
		ИмяСобытия = "Константы.ВКМ_КонтактыКомпанииТелеграм";
		ТекстКомментария = "Заполните контакты компании в форме констант телеграм";
		СоздатьЗаписьВЖурналеРегистрации(ИмяСобытия, ТекстКомментария);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КонтактыКомпанииТелеграм;
	
КонецФункции

// Получить адрес компании телеграм.
// 
// Возвращаемое значение:
//  Неопределено, Произвольный, Строка -  Получить адрес компании телеграм
Функция ПолучитьАдресКомпанииТелеграм() Экспорт
	
	АдресКомпанииТелеграм = Константы.ВКМ_АдресКомпанииТелеграм.Получить();
	
	Если Не ЗначениеЗаполнено(АдресКомпанииТелеграм) Тогда
		ИмяСобытия = "Константы.ВКМ_АдресКомпанииТелеграм";
		ТекстКомментария = "Заполните адрес компании в форме констант телеграм";
		СоздатьЗаписьВЖурналеРегистрации(ИмяСобытия, ТекстКомментария);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат АдресКомпанииТелеграм;
	
КонецФункции

// Получить широту места компании телеграм.
// 
// Возвращаемое значение:
//  Неопределено, Произвольный, Число -  Получить широту места компании телеграм
Функция ПолучитьШиротуМестаКомпанииТелеграм() Экспорт
	
	ШиротаМестаКомпанииТелеграм = Константы.ВКМ_ШиротаМестаКомпанииТелеграм.Получить();
	
	Если Не ЗначениеЗаполнено(ШиротаМестаКомпанииТелеграм) Тогда
		ИмяСобытия = "Константы.ВКМ_ШиротаМестаКомпанииТелеграм";
		ТекстКомментария = "Заполните широту местоположения компании в форме констант телеграм";
		СоздатьЗаписьВЖурналеРегистрации(ИмяСобытия, ТекстКомментария);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ШиротаМестаКомпанииТелеграм;
	
КонецФункции

// Получить долготу места компании телеграм.
// 
// Возвращаемое значение:
//  Неопределено, Произвольный, Число -  Получить долготу места компании телеграм
Функция ПолучитьДолготуМестаКомпанииТелеграм() Экспорт
	
	ДолготаМестаКомпанииТелеграм = Константы.ВКМ_ДолготаМестаКомпанииТелеграм.Получить();
	
	Если Не ЗначениеЗаполнено(ДолготаМестаКомпанииТелеграм) Тогда
		ИмяСобытия = "Константы.ВКМ_ДолготаМестаКомпанииТелеграм";
		ТекстКомментария = "Заполните долготу местоположения компании в форме констант телеграм";
		СоздатьЗаписьВЖурналеРегистрации(ИмяСобытия, ТекстКомментария);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДолготаМестаКомпанииТелеграм;
	
КонецФункции

#КонецОбласти

#Область ОбработатьСформироватьJSON

// Обработать JSON.
// 
// Параметры:
//  СтрокаJSON - Строка - СтрокаJSON
// 
// Возвращаемое значение:
//  Неопределено, Произвольный -  Обработать JSON
Функция ОбработатьJSON(СтрокаJSON) Экспорт
	
	Если СтрокаJSON = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ДанныеJSON = Неопределено;
	
	Попытка
		
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		ДанныеJSON = ПрочитатьJSON(Чтение, Истина,,, "ПреобразованиеДаты", ВКМ_СлужебныеТелеграм);
		
	Исключение
		
		РегистрыСведений.ВКМ_ЛогиТелеграм.ЗаписатьОшибку(ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
	Возврат ДанныеJSON;
	
КонецФункции

// Сформировать JSON.
// 
// Параметры:
//  ДанныеJSON - Структура - ДанныеJSON
//  ФормироватьСПереносами - Булево -  Формировать с переносами
// 
// Возвращаемое значение:
//  Неопределено, Строка -  Сформировать JSON
Функция СформироватьJSON(ДанныеJSON, ФормироватьСПереносами = Ложь) Экспорт
	
	Если ДанныеJSON = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		ЗаписьJSON = Новый ЗаписьJSON;
		Если ФормироватьСПереносами Тогда
			ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		Иначе
			ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, Символы.Таб));
		КонецЕсли;
		
		НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
		НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
		НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
		
		ЗаписатьJSON(ЗаписьJSON, ДанныеJSON, НастройкиСериализацииJSON);
		
		Возврат ЗаписьJSON.Закрыть();
		
	Исключение
		
		РегистрыСведений.ВКМ_ЛогиТелеграм.ЗаписатьОшибку(ИнформацияОбОшибке(), Истина);
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

// Создать запись в журнале регистрации.
// 
// Параметры:
//  ИмяСобытия - Строка -  Имя события
//  ТекстКомментария - Строка -  Текст комментария
Процедура СоздатьЗаписьВЖурналеРегистрации(ИмяСобытия, ТекстКомментария) Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстКомментария);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПреобразованиеДаты

Функция ПреобразованиеДаты(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Свойство = "date" Тогда
		
		Попытка
			
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				ЧисловоеЗначениеДата = Число(Значение);
			Иначе
				ЧисловоеЗначениеДата = Значение;
			КонецЕсли;
			
			Возврат Дата("19700101") + ЧисловоеЗначениеДата;
			
		Исключение
			
			Возврат Дата(1,1,1);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеЧислаВСтроку

Функция ФорматироватьЧислоВСтроку(ТекущееЗначение) Экспорт
	
	Если ТекущееЗначение = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Формат(ТекущееЗначение, "ЧРГ=''; ЧГ=0");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеБулево

Функция ФорматироватьБулево(ТекущееЗначение) Экспорт
	
	Возврат Формат(ТекущееЗначение, "БЛ=False; БИ=True");
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеКоординатВСтроку

Функция ФорматироватьКоординатыВСтроку(ТекущееЗначение) Экспорт
	
	Если ТекущееЗначение = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Формат(ТекущееЗначение, "ЧЦ=8; ЧДЦ=6; ЧРД=.; ЧРГ=''; ЧГ=0");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

